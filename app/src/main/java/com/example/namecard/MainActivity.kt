package com.example.namecard

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.namecard.ui.theme.NameCardTheme

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContent {
            NameCardTheme {
                Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding ->
                    Greeting(
                        name = "Android",
                        role = "Web Application Engineer",
                        modifier = Modifier.padding(innerPadding)
                    )
                }
            }
        }
    }
}

@Composable
fun Greeting(name: String,role: String, modifier: Modifier = Modifier) {
    val iconImage = painterResource(R.drawable.google_icon);
    val iconImageModifier = Modifier
        .size(180.dp)
    val appThemeColor = Color(0xFFE0F7FA);
    Surface( // ËÉåÊôØ„ÇíË®≠ÂÆö„Åô„Çã
        modifier = Modifier.fillMaxSize(),
        color = appThemeColor
    ){
        Box( // ËÉåÊôØ„ÅÆ‰∏ä„Åß„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÇíÈÖçÁΩÆ„Åô„Çã
            modifier = Modifier.fillMaxSize(),
            contentAlignment = Alignment.Center
        ){
            Column( //ÂÖ®‰Ωì„ÅÆ„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÇíË°å„Åß‰∏¶„Åπ„Å¶Ë°®Á§∫„Åô„Çã
                verticalArrangement = Arrangement.Center, //Á∏¶ÊñπÂêë„Å´‰∏≠Â§ÆÂØÑ„Åõ
                horizontalAlignment = Alignment.CenterHorizontally, //Ê®™ÊñπÂêë„Çí‰∏≠Â§Æ„ÅßÊèÉ„Åà„Çã
                modifier = modifier
            )
            {
                Image(//„Ç¢„Ç§„Ç≥„É≥„ÇíË°®Á§∫
                    painter = iconImage,
                    contentDescription = null,
                    contentScale  = ContentScale.Crop,
                    modifier = iconImageModifier

                )
                Text(//ÂêçÂâç„ÇíË°®Á§∫
                    text = name,
                    textAlign = TextAlign.Center,
                    fontSize = 35.sp,
                    fontFamily = FontFamily.Serif
                )
                Text(//ÂΩπÂâ≤„ÇíË°®Á§∫
                    text = role,
                    fontSize = 15.sp,
                    fontFamily = FontFamily.Serif
                )
                }

            Column(
                modifier = Modifier
                    .align(Alignment.BottomCenter)
                    .padding(60.dp)

            ){
                Row (modifier = Modifier
                    .padding(5.dp)
                    .fillMaxWidth() //Column„ÅÆÂπÖ„Å´Âêà„Çè„Åõ„Å¶Row„ÅÆÂπÖ„ÇíÂ∫É„Åí„Çã
                ){
                    Text(//ÂΩπÂâ≤„ÇíË°®Á§∫
                        text = "‚òé",
                        fontSize = 15.sp,
                    )
                    Spacer(modifier = Modifier.width(20.dp)) //„Ç¢„Ç§„Ç≥„É≥„Å®ÊñáÂ≠ó„ÅÆÈñìÁ©∫ÁôΩ
                    Text(//ÂΩπÂâ≤„ÇíË°®Á§∫
                        text = "000-0000-0000",
                        fontSize = 15.sp,
                        fontFamily = FontFamily.Serif,
                        textAlign = TextAlign.Right
                    )
                }

                Row (modifier = Modifier
                    .padding(5.dp)
                    .fillMaxWidth()
                ) {
                    Text(
                        text = "üìß",
                        fontSize = 15.sp,
                    )
                    Spacer(modifier = Modifier.width(20.dp)) //„Ç¢„Ç§„Ç≥„É≥„Å®ÊñáÂ≠ó„ÅÆÈñìÁ©∫ÁôΩ
                    Text(//ÂΩπÂâ≤„ÇíË°®Á§∫
                        text = "harukii1999@gmail.com",
                        fontSize = 15.sp,
                        fontFamily = FontFamily.Serif
                    )
                }

            }


        }
    }
}

@Preview(showBackground = true)
@Composable
fun GreetingPreview() {
    NameCardTheme {
        Greeting(name="Haruki Sugiyama",
            role="Web Application Engineer")
    }
}